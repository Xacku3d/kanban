{"version":3,"sources":["initial-data.js","task.js","useComponentFocus.js","addNewTask.js","column.js","addNewColumn.js","index.js"],"names":["initialData","tasks","task-1","id","content","task-2","task-3","task-4","columns","column-1","title","taskIds","column-2","column-3","columnOrder","Container","styled","div","_templateObject","props","isDragging","Task","_this","this","react_default","a","createElement","react_beautiful_dnd_esm","draggableId","task","index","provided","snapshot","Object","assign","draggableProps","dragHandleProps","ref","innerRef","Component","useComponentFocus","node","callback","handleClick","event","current","contains","target","useEffect","document","addEventListener","removeEventListener","addNewTask_templateObject","Input","textarea","_templateObject2","Button","button","_templateObject3","AddNewTask","_ref","onNewTask","_useState","useState","_useState2","slicedToArray","isFocused","setFocus","useRef","getTaskValue","value","getElementById","trim","length","addNewTask_Container","onKeyDown","e","key","shiftKey","autoFocus","placeholder","type","onClick","column_templateObject","Title","h3","column_templateObject2","TaskList","column_templateObject3","isDraggingOver","Column","updateColumnsState","column","_this2","column_Container","droppableId","droppableProps","map","task_Task","React","addNewColumn_templateObject","addNewColumn_templateObject2","addNewColumn_templateObject3","AddNewColumn","onNewColumn","getCoulmnValue","addNewColumn_Container","addNewColumn_Input","addNewColumn_Button","body","style","backgroundColor","src_templateObject","App","state","newColumn","concat","keys","push","setState","columnID","newTask","onDragEnd","result","_objectSpread3","destination","source","start","finish","startTaskIds","Array","from","splice","newStart","objectSpread","finishTaskIds","newFinish","newState","defineProperty","newTaskIds","src_Container","columnId","taskId","column_Column","ReactDOM","render","src_App","className"],"mappings":"sPA2BeA,EA3BK,CAChBC,MAAO,CACHC,SAAU,CAACC,GAAI,SAAUC,QAAS,wBAClCC,SAAU,CAACF,GAAI,SAAUC,QAAS,0BAClCE,SAAU,CAACH,GAAI,SAAUC,QAAS,mBAClCG,SAAU,CAACJ,GAAI,SAAUC,QAAS,gBAEtCI,QAAS,CACLC,WAAY,CACRN,GAAI,WACJO,MAAO,QACPC,QAAS,CAAC,SAAU,SAAU,SAAU,WAE5CC,WAAY,CACRT,GAAI,WACJO,MAAO,cACPC,QAAS,IAEbE,WAAY,CACRV,GAAI,WACJO,MAAO,OACPC,QAAS,KAGjBG,YAAa,CAAC,WAAW,WAAW,uVCpBxC,IAAMC,EAAYC,IAAOC,IAAVC,IAES,SAAAC,GAAK,OAAKA,EAAMC,WAAa,UAAY,aAIzC,SAAAD,GAAK,OAAKA,EAAMC,WAAa,UAAY,SACpD,SAAAD,GAAK,OAAKA,EAAMC,WAAa,UAAY,SAChB,SAAAD,GAAK,OAAKA,EAAMC,WAAa,MAAQ,MAKtDC,mLACR,IAAAC,EAAAC,KACL,OACIC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACIC,YAAaL,KAAKJ,MAAMU,KAAK1B,GAC7B2B,MAAOP,KAAKJ,MAAMW,OAEjB,SAACC,EAAUC,GAAX,OACGR,EAAAC,EAAAC,cAACX,EAADkB,OAAAC,OAAA,GACQH,EAASI,eACTJ,EAASK,gBAFjB,CAGIC,IAAKN,EAASO,SACdlB,WAAYY,EAASZ,aAEpBE,EAAKH,MAAMU,KAAKzB,kBAdPmC,qBCfnB,SAASC,EAAkBC,EAAMC,GAE5C,IAAMC,EAAc,SAAAC,GACbH,EAAKI,QAAQC,SAASF,EAAMG,SAG/BL,KAGJM,oBAAU,WAEN,OADAC,SAASC,iBAAiB,YAAaP,GAChC,WACHM,SAASE,oBAAoB,YAAaR,KAE/C,uwBCZP,IAAM5B,EAAYC,IAAOC,IAAVmC,KAaTC,EAAQrC,IAAOsC,SAAVC,KAOLC,EAASxC,IAAOyC,OAAVC,KAYG,SAASC,EAATC,GAAiC,IAAZC,EAAYD,EAAZC,UAAYC,EACdC,oBAAS,GADKC,EAAA/B,OAAAgC,EAAA,EAAAhC,CAAA6B,EAAA,GACrCI,EADqCF,EAAA,GAC1BG,EAD0BH,EAAA,GAGtCvB,EAAO2B,mBACb5B,EAAkBC,EAAM,WAAO0B,GAAS,KAExC,IAAME,EAAe,WACjB,IAAMC,EAAQrB,SAASsB,eAAe,aAAaD,MACxB,IAAxBA,EAAME,OAAOC,SAChBZ,EAAUS,GACVH,GAAS,KAUb,OACID,EACA1C,EAAAC,EAAAC,cAACgD,EAAD,CAAWrC,IAAKI,EAAMyB,UAAWA,GACzB1C,EAAAC,EAAAC,cAAC2B,EAAD,CAAOsB,UAVI,SAACC,GAAM,IACnBC,EAAiBD,EAAjBC,IAAiBD,EAAZE,UACW,UAARD,IACJ,UAARA,GAAkBR,IACV,WAARQ,GAAmBV,GAAS,KAMYhE,GAAG,YAAY4E,WAAS,EAACC,YAAY,kBAAkBC,KAAK,SAAQzD,EAAAC,EAAAC,cAAA,WACvGF,EAAAC,EAAAC,cAAC8B,EAAD,CAAQc,MAAM,GAAGY,QAASb,GAAc7C,EAAAC,EAAAC,cAAA,cAAxC,yBAGRF,EAAAC,EAAAC,cAACgD,EAAD,CAAWrC,IAAKI,EAAMyB,UAAWA,EAAWgB,QAAS,kBAAMf,GAAS,KAApE,OACU3C,EAAAC,EAAAC,cAAA,cADV,4tBCzDR,IAAMX,EAAYC,IAAOC,IAAVkE,KAWTC,EAAQpE,IAAOqE,GAAVC,KASLC,EAAWvE,IAAOC,IAAVuE,IAGU,SAAArE,GAAK,OAAKA,EAAMsE,eAAiB,UAAY,UAKhDC,6MACjB7B,UAAY,SAAAhC,GACRP,EAAKH,MAAMwE,mBAAmBrE,EAAKH,MAAMyE,OAAOzF,GAAI0B,4EAG/C,IAAAgE,EAAAtE,KACL,OACIC,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACoE,EAAD,KACItE,EAAAC,EAAAC,cAAC0D,EAAD,KAAQ7D,KAAKJ,MAAMyE,OAAOlF,OAC1Bc,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACAoE,YAAaxE,KAAKJ,MAAMyE,OAAOzF,IAE1B,SAAC4B,EAAUC,GAAX,OACGR,EAAAC,EAAAC,cAAC6D,EAADtD,OAAAC,OAAA,CACAG,IAAKN,EAASO,SACdmD,eAAgBzD,EAASyD,gBACrB1D,EAASiE,gBAEZH,EAAK1E,MAAMlB,MAAMgG,IAAI,SAACpE,EAAMC,GAAW,OAAON,EAAAC,EAAAC,cAACwE,EAAD,CAAMrB,IAAKhD,EAAK1B,GAAI0B,KAAMA,EAAMC,MAAOA,MACrFC,EAASiD,gBAKtBxD,EAAAC,EAAAC,cAACiC,EAAD,CAAYE,UAAWtC,KAAKsC,oBAzBJsC,IAAM5D,6wBC9B1C,IAAMxB,EAAYC,IAAOC,IAAVmF,IAKD,SAAAjF,GAAK,OAAIA,EAAM+C,UAAY,OAAS,SAQ5Cb,EAAQrC,IAAOsC,SAAV+C,KAOL7C,EAASxC,IAAOyC,OAAV6C,KAYG,SAASC,EAAT3C,GAAqC,IAAd4C,EAAc5C,EAAd4C,YAAc1C,EAClBC,oBAAS,GADSC,EAAA/B,OAAAgC,EAAA,EAAAhC,CAAA6B,EAAA,GACzCI,EADyCF,EAAA,GAC9BG,EAD8BH,EAAA,GAG1CvB,EAAO2B,mBACb5B,EAAkBC,EAAM,WAAO0B,GAAS,KAExC,IAAMsC,EAAiB,WACnB,IAAMnC,EAAQrB,SAASsB,eAAe,eAAeD,MAC1B,IAAxBA,EAAME,OAAOC,SAChB+B,EAAYlC,GACZH,GAAS,KAUb,OACID,EACA1C,EAAAC,EAAAC,cAACgF,EAAD,CAAWrE,IAAKI,EAAMyB,UAAWA,GACzB1C,EAAAC,EAAAC,cAACiF,EAAD,CAAOhC,UAVI,SAACC,GAAM,IACnBC,EAAiBD,EAAjBC,IAAiBD,EAAZE,UACW,UAARD,IACJ,UAARA,GAAkB4B,IACV,WAAR5B,GAAmBV,GAAS,KAMWhE,GAAG,cAAc4E,WAAS,EAACC,YAAY,kBAAkBC,KAAK,SAAQzD,EAAAC,EAAAC,cAAA,WACxGF,EAAAC,EAAAC,cAACkF,EAAD,CAAQ1B,QAASuB,GAAgBjF,EAAAC,EAAAC,cAAA,cAAjC,4BAGRF,EAAAC,EAAAC,cAACgF,EAAD,CAAWrE,IAAKI,EAAMyB,UAAWA,EAAWgB,QAAS,kBAAMf,GAAS,KAChE3C,EAAAC,EAAAC,cAAA,kBACMF,EAAAC,EAAAC,cAAA,cADN,+KCxDZuB,SAAS4D,KAAKC,MAAMC,gBAAkB,UAEtC,IAAMhG,EAAYC,IAAOC,IAAV+F,KAKTC,6MACFC,MAAQlH,IAERwG,YAAc,SAAA9F,GACV,IAAMyG,EAAY,CACdhH,GAAE,UAAAiH,OAAYnF,OAAOoF,KAAK/F,EAAK4F,MAAM1G,SAASiE,OAAO,GACrD/D,MAAOA,EACPC,QAAS,IAEbW,EAAK4F,MAAM1G,QAAQ2G,EAAUhH,IAAMgH,EACnC7F,EAAK4F,MAAMpG,YAAYwG,KAAKH,EAAUhH,IACtCmB,EAAKiG,SAASjG,EAAK4F,UAGvBvB,mBAAqB,SAAC6B,EAAU3F,GAC5B,IAAM4F,EAAU,CACZtH,GAAE,QAAAiH,OAAUnF,OAAOoF,KAAK/F,EAAK4F,MAAMjH,OAAOwE,OAAO,GACjDrE,QAASyB,GAEdP,EAAK4F,MAAM1G,QAAQgH,GAAU7G,QAAQ2G,KAAKG,EAAQtH,IAClDmB,EAAK4F,MAAMjH,MAAMwH,EAAQtH,IAAMsH,EAC/BnG,EAAKiG,SAASjG,EAAK4F,UAGtBQ,UAAY,SAAAC,GAAU,IAAAC,EAEVC,EAAqCF,EAArCE,YAAaC,EAAwBH,EAAxBG,OAAQlG,EAAgB+F,EAAhB/F,YAE7B,GAAKiG,IAKDA,EAAY9B,cAAgB+B,EAAO/B,aACnC8B,EAAY/F,QAAUgG,EAAOhG,OAFjC,CAOA,IAAMiG,EAAQzG,EAAK4F,MAAM1G,QAAQsH,EAAO/B,aAClCiC,EAAS1G,EAAK4F,MAAM1G,QAAQqH,EAAY9B,aAE9C,GAAGgC,IAAUC,EAAb,CAsBA,IAAMC,EAAeC,MAAMC,KAAKJ,EAAMpH,SACtCsH,EAAaG,OAAON,EAAOhG,MAAM,GACjC,IAAMuG,EAAQpG,OAAAqG,EAAA,EAAArG,CAAA,GACP8F,EADO,CAEVpH,QAASsH,IAGPM,EAAgBL,MAAMC,KAAKH,EAAOrH,SACxC4H,EAAcH,OAAOP,EAAY/F,MAAO,EAAGF,GAC3C,IAAM4G,EAASvG,OAAAqG,EAAA,EAAArG,CAAA,GACR+F,EADQ,CAEXrH,QAAS4H,IAGPE,EAAQxG,OAAAqG,EAAA,EAAArG,CAAA,GACPX,EAAK4F,MADE,CAEV1G,QAAQyB,OAAAqG,EAAA,EAAArG,CAAA,GACDX,EAAK4F,MAAM1G,SADXoH,EAAA,GAAA3F,OAAAyG,EAAA,EAAAzG,CAAA2F,EAEFS,EAASlI,GAAKkI,GAFZpG,OAAAyG,EAAA,EAAAzG,CAAA2F,EAGFY,EAAUrI,GAAKqI,GAHbZ,MAOXtG,EAAKiG,SAASkB,OA7Cd,CACI,IAAME,EAAaT,MAAMC,KAAKJ,EAAMpH,SACpCgI,EAAWP,OAAON,EAAOhG,MAAO,GAChC6G,EAAWP,OAAOP,EAAY/F,MAAO,EAAGF,GAExC,IAAMuF,EAASlF,OAAAqG,EAAA,EAAArG,CAAA,GACR8F,EADQ,CAEXpH,QAASgI,IAGPF,EAAQxG,OAAAqG,EAAA,EAAArG,CAAA,GACPX,EAAK4F,MADE,CAEV1G,QAAQyB,OAAAqG,EAAA,EAAArG,CAAA,GACDX,EAAK4F,MAAM1G,QADXyB,OAAAyG,EAAA,EAAAzG,CAAA,GAEFkF,EAAUhH,GAAKgH,MAIxB7F,EAAKiG,SAASkB,8EA8Bb,IAAA5C,EAAAtE,KACL,OACIC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACI+F,UAAWnG,KAAKmG,WAEhBlG,EAAAC,EAAAC,cAACkH,EAAD,KACKrH,KAAK2F,MAAMpG,YAAYmF,IAAI,SAAC4C,GACzB,IAAMjD,EAASC,EAAKqB,MAAM1G,QAAQqI,GAC5B5I,EAAQ2F,EAAOjF,QAAQsF,IAAI,SAAA6C,GAAM,OAAIjD,EAAKqB,MAAMjH,MAAM6I,KAC5D,OAAOtH,EAAAC,EAAAC,cAACqH,EAAD,CAAQlE,IAAKe,EAAOzF,GAAIyF,OAAQA,EAAQ3F,MAAOA,EAAO0F,mBAAoBE,EAAKF,uBAE1FnE,EAAAC,EAAAC,cAAC6E,EAAD,CAAcC,YAAajF,KAAKiF,uBArGlCL,IAAM5D,WA4GxByG,IAASC,OAAOzH,EAAAC,EAAAC,cAACwH,EAAD,CAAKC,UAAU,QAAUlG,SAASsB,eAAe","file":"static/js/main.bc5d62a6.chunk.js","sourcesContent":["const initialData = {\r\n    tasks: {\r\n        'task-1': {id: 'task-1', content: 'Take out the garbage'},\r\n        'task-2': {id: 'task-2', content: 'Watch my favorite show'},\r\n        'task-3': {id: 'task-3', content: 'Charge my phone'},\r\n        'task-4': {id: 'task-4', content: 'Cook dinner'}\r\n    },\r\n    columns: {\r\n        'column-1': {\r\n            id: 'column-1',\r\n            title: 'To do',\r\n            taskIds: ['task-1', 'task-2', 'task-3', 'task-4']\r\n        },\r\n        'column-2': {\r\n            id: 'column-2',\r\n            title: 'In progress',\r\n            taskIds: []\r\n        },\r\n        'column-3': {\r\n            id: 'column-3',\r\n            title: 'Done',\r\n            taskIds: []\r\n        },\r\n    },\r\n    columnOrder: ['column-1','column-2','column-3'],\r\n};\r\n\r\nexport default initialData;","import React, { Component } from 'react'\r\nimport styled from 'styled-components';\r\nimport { Draggable } from 'react-beautiful-dnd';\r\n\r\nconst Container = styled.div`\r\n    margin: 0px;\r\n    border: 1px solid ${props => (props.isDragging ? '#094074' : 'lightgray')};\r\n    border-radius: 5px;\r\n    padding: 8px;\r\n    margin-bottom: 8px;\r\n    background-color: ${props => (props.isDragging ? '#A5D328' : 'white')};\r\n    color: ${props => (props.isDragging ? '#FFFFFC' : 'black')};\r\n    box-shadow: 0 0 10px rgba(0,0,0,${props => (props.isDragging ? '0.5' : '0')});\r\n    word-wrap: break-word;\r\n    white-space: pre-line;\r\n`;\r\n\r\nexport default class Task extends Component {\r\n    render() {\r\n        return (\r\n            <Draggable\r\n                draggableId={this.props.task.id}\r\n                index={this.props.index}\r\n            >\r\n                {(provided, snapshot) => (\r\n                    <Container\r\n                        {...provided.draggableProps}\r\n                        {...provided.dragHandleProps}\r\n                        ref={provided.innerRef}\r\n                        isDragging={snapshot.isDragging}\r\n                    >\r\n                        {this.props.task.content}\r\n                    </Container>\r\n                )}\r\n            </Draggable>\r\n        );\r\n    }\r\n}\r\n","import {useEffect} from 'react'\r\n\r\nexport default function useComponentFocus(node, callback) {\r\n    \r\n    const handleClick = event => {\r\n        if(node.current.contains(event.target)) {\r\n            return;\r\n        }\r\n        callback();\r\n    }\r\n\r\n    useEffect(()=>{\r\n        document.addEventListener('mousedown', handleClick);\r\n        return () => {\r\n            document.removeEventListener('mousedown', handleClick)\r\n        }\r\n    }, [])\r\n}\r\n","import React, {useState, useRef} from 'react'\r\nimport styled from 'styled-components';\r\nimport useComponentFocus from './useComponentFocus';\r\n\r\nconst Container = styled.div`\r\n    margin: 8px;\r\n    border: 2px solid #A5D328;\r\n    border-radius: 5px;\r\n    padding: 8px;\r\n    margin-bottom: 8px;\r\n    background-color: white;\r\n    color: black;\r\n    box-shadow: 0 0 1px rgba(0,0,0,0.1);\r\n    cursor: pointer;\r\n    font-family: 'Noto Sans KR', sans-serif;\r\n`;\r\n\r\nconst Input = styled.textarea`\r\n    width: 191px;\r\n    height: 25px;\r\n    padding-left: 5px;\r\n    resize: none;\r\n`\r\n\r\nconst Button = styled.button`\r\n    font-size: 17px;\r\n    cursor: pointer;\r\n    margin-top: 5px;\r\n    width: 200px;\r\n    border: 0px;\r\n    height: 29px;\r\n    background-color: #A5D328;\r\n    color: #FFFFFC;\r\n    paddinf-left: 0px;\r\n`\r\n\r\nexport default function AddNewTask({onNewTask}) {\r\n    const [isFocused, setFocus] = useState(false);\r\n    \r\n    const node = useRef();\r\n    useComponentFocus(node, () => {setFocus(false)});\r\n\r\n    const getTaskValue = () => {\r\n        const value = document.getElementById('inputTask').value;\r\n        if(value.trim().length === 0) {return;}\r\n        onNewTask(value);\r\n        setFocus(false);\r\n    }\r\n\r\n    const onInputKeyDown = (e) => {\r\n        const {key, shiftKey} = e;\r\n        if(shiftKey && key === 'Enter') {return;}\r\n        if(key === 'Enter') {getTaskValue()}\r\n        if(key === 'Escape') {setFocus(false)}\r\n    }\r\n\r\n    return (\r\n        isFocused ?\r\n        <Container ref={node} isFocused={isFocused}>\r\n                <Input onKeyDown={onInputKeyDown}  id='inputTask' autoFocus placeholder=\"Enter the title\" type=\"text\"/><br/>\r\n                <Button value=\"\" onClick={getTaskValue}><b>+</b>&nbsp;&nbsp;Add new task</Button>\r\n        </Container>\r\n        :\r\n        <Container ref={node} isFocused={isFocused} onClick={() => setFocus(true)}>\r\n            &nbsp;<b>+</b> &nbsp;&nbsp;&nbsp;Add new task\r\n        </Container>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { Droppable } from 'react-beautiful-dnd';\r\nimport styled from 'styled-components';\r\nimport Task from './task';\r\nimport AddNewTask from './addNewTask';\r\n\r\nconst Container = styled.div`   \r\n    margin: 8px;\r\n    font-family: 'Noto Sans KR', sans-serif;\r\n    width: 220px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    color: #6C756B;\r\n    background-color: white;\r\n    box-shadow: 0 0 10px rgba(0,0,0,0.5);\r\n`;\r\n\r\nconst Title = styled.h3`\r\n    word-wrap: break-word;\r\n    white-space: pre-line;\r\n    margin: 0px;\r\n    padding: 8px;\r\n    background-color: #094074;\r\n    color: #F2F4FF;\r\n`;\r\n\r\nconst TaskList = styled.div`\r\n    padding: 8px;\r\n    padding-bottom: 0px;\r\n    background-color: ${props => (props.isDraggingOver ? '#EEFFB7' : 'white')};\r\n    flex-grow: 1;\r\n    min-height: 50px;\r\n`;\r\n\r\nexport default class Column extends React.Component {\r\n    onNewTask = task => {\r\n        this.props.updateColumnsState(this.props.column.id, task)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n            <Container>\r\n                <Title>{this.props.column.title}</Title>\r\n                <Droppable\r\n                droppableId={this.props.column.id}\r\n                >\r\n                    {(provided, snapshot) => (\r\n                        <TaskList\r\n                        ref={provided.innerRef}\r\n                        isDraggingOver={snapshot.isDraggingOver}\r\n                        {...provided.droppableProps}\r\n                        >\r\n                        {this.props.tasks.map((task, index) => {return <Task key={task.id} task={task} index={index} />})}\r\n                        {provided.placeholder}\r\n                        </TaskList>\r\n                    )}\r\n                </Droppable>\r\n            </Container>\r\n            <AddNewTask onNewTask={this.onNewTask}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, {useState, useRef} from 'react';\r\nimport styled from 'styled-components';\r\nimport useComponentFocus from './useComponentFocus';\r\n\r\nconst Container = styled.div`   \r\n    padding: 8px;\r\n    margin: 8px;\r\n    font-family: 'Noto Sans KR', sans-serif;\r\n    min-width: 220px;\r\n    height: ${props => props.isFocused ? '65px' : '30px'};\r\n    border: solid 2px #A5D328;\r\n    cursor: pointer;\r\n    background-color: #094074;\r\n    color: #F2F4FF;\r\n    box-shadow: 0 0 10px rgba(0,0,0,0.5);\r\n`;\r\n\r\nconst Input = styled.textarea`\r\n    width: 206px;\r\n    height: 25px;\r\n    padding-left: 5px;\r\n    resize: none;\r\n`\r\n\r\nconst Button = styled.button`\r\n    font-size: 17px;\r\n    cursor: pointer;\r\n    margin-top: 5px;\r\n    width: 215px;\r\n    border: 0px;\r\n    height: 29px;\r\n    background-color: #A5D328;\r\n    color: #FFFFFC;\r\n    padding-left: 0px;\r\n`\r\n\r\nexport default function AddNewColumn({onNewColumn}) {\r\n    const [isFocused, setFocus] = useState(false);\r\n\r\n    const node = useRef();\r\n    useComponentFocus(node, () => {setFocus(false)});\r\n\r\n    const getCoulmnValue = () => {\r\n        const value = document.getElementById('inputColumn').value;\r\n        if(value.trim().length === 0) {return;}\r\n        onNewColumn(value);\r\n        setFocus(false);\r\n    }\r\n\r\n    const onInputKeyDown = (e) => {\r\n        const {key, shiftKey} = e;\r\n        if(shiftKey && key === 'Enter') {return;}\r\n        if(key === 'Enter') {getCoulmnValue()}\r\n        if(key === 'Escape') {setFocus(false)}\r\n    }\r\n\r\n    return (\r\n        isFocused ?\r\n        <Container ref={node} isFocused={isFocused}>\r\n                <Input onKeyDown={onInputKeyDown} id='inputColumn' autoFocus placeholder=\"Enter the title\" type=\"text\"/><br/>\r\n                <Button onClick={getCoulmnValue}><b>+</b> &nbsp;&nbsp;Add new column</Button>\r\n        </Container>\r\n        :\r\n        <Container ref={node} isFocused={isFocused} onClick={() => setFocus(true)}>\r\n            <div>\r\n            &nbsp;<b>+</b> &nbsp;&nbsp;&nbsp;Add new column\r\n            </div>\r\n        </Container>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport styled from 'styled-components';\nimport { DragDropContext } from 'react-beautiful-dnd';\nimport initialData from './initial-data';\nimport Column from './column';\nimport AddNewColumn from './addNewColumn';\n\ndocument.body.style.backgroundColor = '#D0E0EF'\n\nconst Container = styled.div`\n    display: flex;\n    align-items: flex-start;\n    flex-wrap: wrap;\n`\nclass App extends React.Component {\n    state = initialData;\n\n    onNewColumn = title => {\n        const newColumn = {\n            id: `column-${Object.keys(this.state.columns).length+1}`,\n            title: title,\n            taskIds: []\n        };\n        this.state.columns[newColumn.id] = newColumn;\n        this.state.columnOrder.push(newColumn.id);\n        this.setState(this.state);\n    }\n\n    updateColumnsState = (columnID, task) => {\n        const newTask = {\n            id: `task-${Object.keys(this.state.tasks).length+1}`,\n            content: task\n        };\n       this.state.columns[columnID].taskIds.push(newTask.id);\n       this.state.tasks[newTask.id] = newTask;\n       this.setState(this.state);\n    }\n\n    onDragEnd = result => {\n\n        const { destination, source, draggableId } = result;\n\n        if (!destination) {\n            return;\n        }\n\n        if (\n            destination.droppableId === source.droppableId &&\n            destination.index === source.index\n        ) {\n            return;\n        }\n\n        const start = this.state.columns[source.droppableId];\n        const finish = this.state.columns[destination.droppableId];\n\n        if(start === finish) {\n            const newTaskIds = Array.from(start.taskIds);\n            newTaskIds.splice(source.index, 1);\n            newTaskIds.splice(destination.index, 0, draggableId);\n    \n            const newColumn = {\n                ...start,\n                taskIds: newTaskIds\n            }\n    \n            const newState = {\n                ...this.state,\n                columns: {\n                    ...this.state.columns,\n                    [newColumn.id]: newColumn,\n                }\n            }\n    \n            this.setState(newState);\n            return;\n        }\n\n        const startTaskIds = Array.from(start.taskIds);\n        startTaskIds.splice(source.index,1);\n        const newStart = {\n            ...start,\n            taskIds: startTaskIds,\n        };\n        \n        const finishTaskIds = Array.from(finish.taskIds);\n        finishTaskIds.splice(destination.index, 0, draggableId);\n        const newFinish = {\n            ...finish,\n            taskIds: finishTaskIds\n        }\n\n        const newState = {\n            ...this.state,\n            columns: {\n                ...this.state.columns,\n                [newStart.id]: newStart,\n                [newFinish.id]: newFinish,\n            }\n        }\n\n        this.setState(newState);\n    }\n\n    render() {\n        return (\n            <DragDropContext\n                onDragEnd={this.onDragEnd}\n            >\n                <Container>\n                    {this.state.columnOrder.map((columnId) => {\n                        const column = this.state.columns[columnId];\n                        const tasks = column.taskIds.map(taskId => this.state.tasks[taskId]);\n                        return <Column key={column.id} column={column} tasks={tasks} updateColumnsState={this.updateColumnsState}/>\n                    })}\n                    <AddNewColumn onNewColumn={this.onNewColumn} />\n                </Container>\n            </DragDropContext>\n        )\n    }\n}\n\nReactDOM.render(<App className='app' />, document.getElementById('root'));\n"],"sourceRoot":""}