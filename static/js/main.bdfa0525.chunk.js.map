{"version":3,"sources":["initial-data.js","task.js","addNewTask.js","column.js","addNewColumn.js","index.js"],"names":["initialData","tasks","task-1","id","content","task-2","task-3","task-4","columns","column-1","title","taskIds","column-2","column-3","columnOrder","Container","styled","div","_templateObject","props","isDragging","Task","_this","this","react_default","a","createElement","react_beautiful_dnd_esm","draggableId","task","index","provided","snapshot","Object","assign","draggableProps","dragHandleProps","ref","innerRef","Component","addNewTask_templateObject","Input","input","_templateObject2","Button","button","_templateObject3","AddNewTask","_ref","onNewTask","_useState","useState","_useState2","slicedToArray","isFocused","setFocus","document","body","addEventListener","e","target","localName","addNewTask_Container","autoFocus","placeholder","type","value","onClick","getElementById","column_templateObject","Title","h3","column_templateObject2","TaskList","column_templateObject3","isDraggingOver","Column","updateColumnsState","column","_this2","column_Container","droppableId","droppableProps","map","task_Task","key","React","addNewColumn_templateObject","addNewColumn_templateObject2","addNewColumn_templateObject3","AddNewColumn","onNewColumn","addNewColumn_Container","addNewColumn_Input","addNewColumn_Button","style","backgroundColor","src_templateObject","App","state","newColumn","concat","keys","length","push","setState","columnID","newTask","onDragEnd","result","_objectSpread3","destination","source","start","finish","startTaskIds","Array","from","splice","newStart","objectSpread","finishTaskIds","newFinish","newState","defineProperty","newTaskIds","src_Container","columnId","taskId","column_Column","ReactDOM","render","src_App","className"],"mappings":"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","file":"static/js/main.bdfa0525.chunk.js","sourcesContent":["const initialData = {\r\n    tasks: {\r\n        'task-1': {id: 'task-1', content: 'Take out the garbage'},\r\n        'task-2': {id: 'task-2', content: 'Watch my favorite show'},\r\n        'task-3': {id: 'task-3', content: 'Charge my phone'},\r\n        'task-4': {id: 'task-4', content: 'Cook dinner'}\r\n    },\r\n    columns: {\r\n        'column-1': {\r\n            id: 'column-1',\r\n            title: 'To do',\r\n            taskIds: ['task-1', 'task-2', 'task-3', 'task-4']\r\n        },\r\n        'column-2': {\r\n            id: 'column-2',\r\n            title: 'In progress',\r\n            taskIds: []\r\n        },\r\n        'column-3': {\r\n            id: 'column-3',\r\n            title: 'Done',\r\n            taskIds: []\r\n        },\r\n    },\r\n    columnOrder: ['column-1','column-2','column-3'],\r\n};\r\n\r\nexport default initialData;","import React, { Component } from 'react'\r\nimport styled from 'styled-components';\r\nimport { Draggable } from 'react-beautiful-dnd';\r\n\r\nconst Container = styled.div`\r\n    margin: 0px;\r\n    border: 1px solid ${props => (props.isDragging ? '#094074' : 'lightgray')};\r\n    border-radius: 5px;\r\n    padding: 8px;\r\n    margin-bottom: 8px;\r\n    background-color: ${props => (props.isDragging ? '#A5D328' : 'white')};\r\n    color: ${props => (props.isDragging ? '#FFFFFC' : 'black')};\r\n    box-shadow: 0 0 10px rgba(0,0,0,${props => (props.isDragging ? '0.5' : '0')});\r\n`;\r\n\r\nexport default class Task extends Component {\r\n    render() {\r\n        return (\r\n            <Draggable\r\n                draggableId={this.props.task.id}\r\n                index={this.props.index}\r\n            >\r\n                {(provided, snapshot) => (\r\n                    <Container\r\n                        {...provided.draggableProps}\r\n                        {...provided.dragHandleProps}\r\n                        ref={provided.innerRef}\r\n                        isDragging={snapshot.isDragging}\r\n                    >\r\n                        {this.props.task.content}\r\n                    </Container>\r\n                )}\r\n            </Draggable>\r\n        );\r\n    }\r\n}\r\n","import React, {useState} from 'react'\r\nimport styled from 'styled-components';\r\n\r\nconst Container = styled.div`\r\n    margin: 8px;\r\n    border: 2px solid #A5D328;\r\n    border-radius: 5px;\r\n    padding: 8px;\r\n    margin-bottom: 8px;\r\n    background-color: white;\r\n    color: black;\r\n    box-shadow: 0 0 1px rgba(0,0,0,0.1);\r\n    cursor: pointer;\r\n    font-family: 'Noto Sans KR', sans-serif;\r\n`;\r\n\r\nconst Input = styled.input`\r\n    width: 191px;\r\n    height: 25px;\r\n    padding-left: 5px;\r\n`\r\n\r\nconst Button = styled.button`\r\n    font-size: 17px;\r\n    cursor: pointer;\r\n    margin-top: 5px;\r\n    width: 200px;\r\n    border: 0px;\r\n    height: 29px;\r\n    background-color: #A5D328;\r\n    color: #FFFFFC;\r\n    paddinf-left: 0px;\r\n`\r\n\r\nexport default function AddNewTask({onNewTask}) {\r\n    const [isFocused, setFocus] = useState(false);\r\n    \r\n    if(isFocused) {\r\n        document.body.addEventListener('click',(e) => {\r\n            if(!(e.target.localName === 'input' || e.target.localName === 'button')) {\r\n                setFocus(false);\r\n            }\r\n        });\r\n    }\r\n\r\n    const getTaskValue = () => {\r\n        onNewTask(document.getElementById('inputTask').value);\r\n        setFocus(false);\r\n    }\r\n\r\n    return (\r\n        isFocused ?\r\n        <Container isFocused={isFocused}>\r\n                <Input  id='inputTask' autoFocus placeholder=\"Enter the title\" type=\"text\"/><br/>\r\n                <Button value=\"\" onClick={getTaskValue}><b>+</b>&nbsp;&nbsp;Add new task</Button>\r\n        </Container>\r\n        :\r\n        <Container isFocused={isFocused} onClick={() => setFocus(true)}>\r\n            &nbsp;<b>+</b> &nbsp;&nbsp;&nbsp;Add new task\r\n        </Container>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { Droppable } from 'react-beautiful-dnd';\r\nimport styled from 'styled-components';\r\nimport Task from './task';\r\nimport AddNewTask from './addNewTask';\r\n\r\nconst Container = styled.div`   \r\n    margin: 8px;\r\n    font-family: 'Noto Sans KR', sans-serif;\r\n    width: 220px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    color: #6C756B;\r\n    background-color: white;\r\n    box-shadow: 0 0 10px rgba(0,0,0,0.5);\r\n`;\r\n\r\nconst Title = styled.h3`\r\n    margin: 0px;\r\n    padding: 8px;\r\n    background-color: #094074;\r\n    color: #F2F4FF;\r\n`;\r\n\r\nconst TaskList = styled.div`\r\n    padding: 8px;\r\n    padding-bottom: 0px;\r\n    background-color: ${props => (props.isDraggingOver ? '#EEFFB7' : 'white')};\r\n    flex-grow: 1;\r\n    min-height: 50px;\r\n`;\r\n\r\nexport default class Column extends React.Component {\r\n    onNewTask = task => {\r\n        this.props.updateColumnsState(this.props.column.id, task)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n            <Container>\r\n                <Title>{this.props.column.title}</Title>\r\n                <Droppable\r\n                droppableId={this.props.column.id}\r\n                >\r\n                    {(provided, snapshot) => (\r\n                        <TaskList\r\n                        ref={provided.innerRef}\r\n                        isDraggingOver={snapshot.isDraggingOver}\r\n                        {...provided.droppableProps}\r\n                        >\r\n                        {this.props.tasks.map((task, index) => {return <Task key={task.id} task={task} index={index} />})}\r\n                        {provided.placeholder}\r\n                        </TaskList>\r\n                    )}\r\n                </Droppable>\r\n            </Container>\r\n            <AddNewTask onNewTask={this.onNewTask}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, {useState} from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Container = styled.div`   \r\n    padding: 8px;\r\n    margin: 8px;\r\n    font-family: 'Noto Sans KR', sans-serif;\r\n    width: 220px;\r\n    height: ${props => props.isFocused ? '65px' : '30px'};\r\n    border: solid 2px #A5D328;\r\n    cursor: pointer;\r\n    background-color: #094074;\r\n    color: #F2F4FF;\r\n    box-shadow: 0 0 10px rgba(0,0,0,0.5);\r\n`;\r\n\r\nconst Input = styled.input`\r\n    width: 206px;\r\n    height: 25px;\r\n    padding-left: 5px;\r\n`\r\n\r\nconst Button = styled.button`\r\n    font-size: 17px;\r\n    cursor: pointer;\r\n    margin-top: 5px;\r\n    width: 215px;\r\n    border: 0px;\r\n    height: 29px;\r\n    background-color: #A5D328;\r\n    color: #FFFFFC;\r\n    paddinf-left: 0px;\r\n`\r\n\r\nexport default function AddNewColumn({onNewColumn}) {\r\n    const [isFocused, setFocus] = useState(false);\r\n\r\n    if(isFocused) {\r\n        document.body.addEventListener('click',(e) => {\r\n            if(!(e.target.localName === 'input' || e.target.localName === 'button')) {\r\n                setFocus(false);\r\n            }\r\n        });\r\n    }\r\n\r\n    const getCoulmnValue = () => {\r\n        onNewColumn(document.getElementById('inputColumn').value);\r\n        setFocus(false);\r\n    }\r\n\r\n    return (\r\n        isFocused ?\r\n        <Container isFocused={isFocused}>\r\n                <Input  id='inputColumn' autoFocus placeholder=\"Enter the title\" type=\"text\"/><br/>\r\n                <Button value=\"\" onClick={getCoulmnValue}><b>+</b> &nbsp;&nbsp;Add new column</Button>\r\n        </Container>\r\n        :\r\n        <Container isFocused={isFocused}>\r\n            <div onClick={() => setFocus(true)}>\r\n            &nbsp;<b>+</b> &nbsp;&nbsp;&nbsp;Add new column\r\n            </div>\r\n        </Container>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport styled from 'styled-components';\nimport { DragDropContext } from 'react-beautiful-dnd';\nimport initialData from './initial-data';\nimport Column from './column';\nimport AddNewColumn from './addNewColumn';\n\ndocument.body.style.backgroundColor = '#D0E0EF'\n\nconst Container = styled.div`\n    display: flex;\n    align-items: flex-start;\n`\nclass App extends React.Component {\n    state = initialData;\n\n    onNewColumn = title => {\n        const newColumn = {\n            id: `column-${Object.keys(this.state.columns).length+1}`,\n            title: title,\n            taskIds: []\n        };\n        this.state.columns[newColumn.id] = newColumn;\n        this.state.columnOrder.push(newColumn.id);\n        this.setState(this.state);\n    }\n\n    updateColumnsState = (columnID, task) => {\n        const newTask = {\n            id: `task-${Object.keys(this.state.tasks).length+1}`,\n            content: task\n        };\n       this.state.columns[columnID].taskIds.push(newTask.id);\n       this.state.tasks[newTask.id] = newTask;\n       this.setState(this.state);\n    }\n\n    onDragEnd = result => {\n\n        const { destination, source, draggableId } = result;\n\n        if (!destination) {\n            return;\n        }\n\n        if (\n            destination.droppableId === source.droppableId &&\n            destination.index === source.index\n        ) {\n            return;\n        }\n\n        const start = this.state.columns[source.droppableId];\n        const finish = this.state.columns[destination.droppableId];\n\n        if(start === finish) {\n            const newTaskIds = Array.from(start.taskIds);\n            newTaskIds.splice(source.index, 1);\n            newTaskIds.splice(destination.index, 0, draggableId);\n    \n            const newColumn = {\n                ...start,\n                taskIds: newTaskIds\n            }\n    \n            const newState = {\n                ...this.state,\n                columns: {\n                    ...this.state.columns,\n                    [newColumn.id]: newColumn,\n                }\n            }\n    \n            this.setState(newState);\n            return;\n        }\n\n        const startTaskIds = Array.from(start.taskIds);\n        startTaskIds.splice(source.index,1);\n        const newStart = {\n            ...start,\n            taskIds: startTaskIds,\n        };\n        \n        const finishTaskIds = Array.from(finish.taskIds);\n        finishTaskIds.splice(destination.index, 0, draggableId);\n        const newFinish = {\n            ...finish,\n            taskIds: finishTaskIds\n        }\n\n        const newState = {\n            ...this.state,\n            columns: {\n                ...this.state.columns,\n                [newStart.id]: newStart,\n                [newFinish.id]: newFinish,\n            }\n        }\n\n        this.setState(newState);\n    }\n\n    render() {\n        return (\n            <DragDropContext\n                onDragEnd={this.onDragEnd}\n            >\n                <Container>\n                    {this.state.columnOrder.map((columnId) => {\n                        const column = this.state.columns[columnId];\n                        const tasks = column.taskIds.map(taskId => this.state.tasks[taskId]);\n                        return <Column key={column.id} column={column} tasks={tasks} updateColumnsState={this.updateColumnsState}/>\n                    })}\n                    <AddNewColumn onNewColumn={this.onNewColumn} />\n                </Container>\n            </DragDropContext>\n        )\n    }\n}\n\nReactDOM.render(<App className='app' />, document.getElementById('root'));\n"],"sourceRoot":""}